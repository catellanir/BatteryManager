@page "/"
@using BatteryManager.UI.Models
@using BatteryManager.UI.Services
@using ClosedXML.Excel
@using System.Linq
@rendermode InteractiveServer
@inject IImportService ImportService
<FluentInputFile @ref="@myFileUploader"
                 DragDropZoneVisible="false"
                 Mode="InputFileMode.Stream"
                 Multiple="false"
                 AnchorId="MyUploadButton"
                 MaximumFileSize="@(100 * 1024 * 1024)"
                 Accept=".xlsx"
                 OnProgressChange="@(e =>
                     {
                         progressPercent = e.ProgressPercent;
                         progressTitle = e.ProgressTitle;
                     })"
                 OnCompleted="@OnCompleted" />

<FluentProgress Min="0" Max="100" Visible="@(progressPercent > 0)" Value="@progressPercent" />
<FluentLabel Alignment="HorizontalAlignment.Center">
    @progressTitle
</FluentLabel>

<FluentButton Id="MyUploadButton" Appearance="Appearance.Accent">
    Upload files
</FluentButton>

@if (Files.Any())
{
    <h4>File(s) uploaded:</h4>

}

@code
{
    FluentInputFile? myFileUploader = default!;
    int? progressPercent;
    string? progressTitle;
    FluentInputFileEventArgs[] Files = Array.Empty<FluentInputFileEventArgs>();
    async Task OnCompleted(IEnumerable<FluentInputFileEventArgs> files)
    {
        Files = files.ToArray();



        progressPercent = myFileUploader!.ProgressPercent;
        progressTitle = myFileUploader!.ProgressTitle;

        try
        {

            foreach (var file in Files)
            {
                if (file.Stream != null)
                {
                    var ms = new MemoryStream();
                    await file.Stream.CopyToAsync(ms);
                    var workbook = new XLWorkbook(ms);
                    foreach (var ws in workbook.Worksheets)
                    {
                        foreach(var row in ws.Rows().Skip(1))
                        {
                            var batterydata = new BatteryData()
                                {
                                    Serial = row.Cell("A").Value.ToString(),
                                    ProductName = row.Cell("B").Value.ToString(),
                                    Plant = row.Cell("C").Value.ToString(),
                                    Customer = row.Cell("E").Value.ToString(),
                                    Capacity = int.TryParse(row.Cell("F").Value.ToString(), out var capacity) ? capacity: 0,
                                    Voltage = int.TryParse(row.Cell("G").Value.ToString(), out var voltage) ? voltage : 0,
                                    CellGeneration = row.Cell("P").Value.ToString(),
                                };
                            await ImportService.Import(batterydata);
                        }
                    }
                }
            }
        }
        catch (Exception ex)
        {
            
            throw;
        }
        // For the demo, delete these files.
    }
}
