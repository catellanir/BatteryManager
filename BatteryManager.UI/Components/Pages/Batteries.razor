@page "/batteries"
@using BatteryManager.UI.DataAccess
@using BatteryManager.UI.Services
@attribute [StreamRendering]
@inject IBatteryService BatteryService

<PageTitle>Batteries</PageTitle>

<h1>Batteries</h1>

@if (batteries == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <!-- This page is rendered in SSR mode, so the FluentDataGrid component does not offer any interactivity (like sorting). -->
    <FluentDataGrid Id="batteries-grid" Items="@batteries" GridTemplateColumns="1fr 1fr 1fr 2fr" TGridItem="Battery">
        <PropertyColumn Title="Id" Property="@(c => c!.Id)" Align="Align.Start" />
        <PropertyColumn Title="Name" Property="@(c => c!.Serial)" Align="Align.Start" />
        <PropertyColumn Title="Plant" Property="@(c => c!.Plant.Name)" Align="Align.Start" />
        <PropertyColumn Title="Customer" Property="@(c => c!.Plant.Customer.Name)" Align="Align.Start" />
    </FluentDataGrid>
}

@code {
    private IQueryable<Battery>? batteries;

    protected override async Task OnInitializedAsync()
    {
        var c =await BatteryService.GetAll();
        batteries = c.AsQueryable();
    }
}
